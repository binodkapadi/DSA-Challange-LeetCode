SOLUTION ==>

-----------APPROACH 1[hashing technique]-----------

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
         unordered_set<int> seen;
        for (int num : nums) {
            if (seen.count(num))  
                return true;
            seen.insert(num);
        }
        return false;      
    }
};


OR

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
         unordered_set<int> seen;
        for (int num : nums) {
            if (seen.find(num) != seen.end())  {
                return true;
            }     
            seen.insert(num);
        }
        return false;      
    }
};

Time Complexity: O(n)
Space Complexity: O(n)


------------APPROACH 2[Sorting Approach]---------------

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] == nums[i-1]) return true;
    }
    return false;
    }
};
