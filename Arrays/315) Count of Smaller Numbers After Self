SOLUTION ===>

-------APPROACH 1 [Binary Indexed Tree (Fenwick Tree) or Merge Sort (O(n log n))]------

class Solution {
public:
    vector<int> countSmaller(vector<int>& nums) {
        int n = nums.size();
        vector<int> result(n, 0);
        vector<pair<int, int>> arr; // pair of {value, original_index}

        for (int i = 0; i < n; i++)
            arr.push_back({nums[i], i});

        mergeSort(arr, 0, n - 1, result);
        return result;
    }

private:
    void mergeSort(vector<pair<int, int>>& arr, int left, int right, vector<int>& result) {
        if (left >= right) return;

        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid, result);
        mergeSort(arr, mid + 1, right, result);
        merge(arr, left, mid, right, result);
    }

    void merge(vector<pair<int, int>>& arr, int left, int mid, int right, vector<int>& result) {
        vector<pair<int, int>> temp;
        int i = left;
        int j = mid + 1;
        int rightCount = 0; // how many smaller elements from right side have been moved

        while (i <= mid && j <= right) {
            if (arr[j].first < arr[i].first) {
                // right element is smaller
                rightCount++;
                temp.push_back(arr[j]);
                j++;
            } else {
                // arr[i] is greater than all rightCount smaller numbers so far
                result[arr[i].second] += rightCount;
                temp.push_back(arr[i]);
                i++;
            }
        }

        // remaining left side elements
        while (i <= mid) {
            result[arr[i].second] += rightCount;
            temp.push_back(arr[i]);
            i++;
        }

        // remaining right side elements
        while (j <= right) {
            temp.push_back(arr[j]);
            j++;
        }

        // copy back
        for (int k = left; k <= right; k++) {
            arr[k] = temp[k - left];
        }
    }
};


------------APPROACH 2 [Brute Force (O(n²))]------------

class Solution {
public:
    vector<int> countSmaller(vector<int>& nums) {
        int n = nums.size();
        vector<int> result(n, 0);

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[j] < nums[i])
                    result[i]++;
            }
        }
        return result;      
    }
};


//Works but too slow for n = 10⁵.
