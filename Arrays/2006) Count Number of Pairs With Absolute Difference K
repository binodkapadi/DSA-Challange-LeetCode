SOLUTION ===>

----------APPROACH 1 [Brute-force Approach (Simple O(n²))]----------


class Solution {
public:
    int countKDifference(vector<int>& nums, int k) {
        int count = 0;
        int n = nums.size();

        for(int i = 0; i < n - 1; i++){
            for(int j = i+1; j < n; j++){
                if(abs(nums[i] - nums[j]) == k){
                    count++;
                }
            }
        }
        return count;    
    }
};

// TIME COMPLEXITY = O(n²).

-----------APPROACH 2 [Using Counting Array]------------

class Solution {
public:
    int countKDifference(vector<int>& nums, int k) {
        int freq[101] = {0};
        int count = 0;
        for (int num : nums) {
            if (num + k <= 100) 
                count += freq[num + k];
            if (num - k >= 1)   
                count += freq[num - k];
            freq[num]++;
        }
        return count;  
    }
};

// TIME COMLEXITY = O(n + 100) = O(n).
